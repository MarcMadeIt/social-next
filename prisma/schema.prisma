generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id
  username              String            @unique
  avatar                String?
  cover                 String?
  firstname             String?
  surname               String?
  owner                 String?
  desc                  String?
  city                  String?
  country               String?
  race                  String?
  instagram             String?
  facebook              String?
  color                 String?
  createdAt             DateTime          @default(now())
  BlockReceived         Block[]           @relation("BlockReceived")
  BlockSent             Block[]           @relation("BlockSent")
  comments              Comment[]
  followers             Follower[]        @relation("UserFollowers")
  followings            Follower[]        @relation("UserFollowings")
  followRequestReceived FollowerRequest[] @relation("FollowRequestReceived")
  followRequestSent     FollowerRequest[] @relation("FollowRequestSent")
  likes                 Like[]
  posts                 Post[]
  stories               Story?
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([postId], map: "Comment_postId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commentId], map: "Like_commentId_fkey")
  @@index([postId], map: "Like_postId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId], map: "Follower_followerId_fkey")
  @@index([followingId], map: "Follower_followingId_fkey")
}

model FollowerRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   String
  receiverId String
  receiver   User     @relation("FollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@index([receiverId], map: "FollowerRequest_receiverId_fkey")
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockerId String
  blockedId String
  blocked   User     @relation("BlockReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User     @relation("BlockSent", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId], map: "Block_blockedId_fkey")
}

model Story {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String   @unique
  img       String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
