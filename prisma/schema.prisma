// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                    String            @id
    username              String            @unique
    avatar                String?
    cover                 String?
    firstname             String?
    surname               String?
    owner                 String?
    desc                  String?
    city                  String?
    country               String?
    race                  String?
    instagram             String?
    facebook              String?
    color                 String?
    createdAt             DateTime          @default(now())
    Posts                 Post[]
    Likes                 Like[]
    Comments              Comment[]
    Followers             Follower[]        @relation("UserFollowers")
    Followings            Follower[]        @relation("UserFollowings")
    FollowRequestSent     FollowerRequest[] @relation("FollowRequestSent")
    FollowRequestReceived FollowerRequest[] @relation("FollowRequestReceived")

    BlockSent     Block[]  @relation("BlockSent")
    BlockReceived Block[]  @relation("BlockReceived")
    Stories       Stories?
}

model Post {
    id        Int       @id @default(autoincrement())
    desc      String
    img       String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    Likes     Like[]
    Comments  Comment[]

    @@index([userId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    desc      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int
    Likes     Like[]
}

model Like {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    Int?
    Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId Int?
}

model Follower {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
    followerId  String
    following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
    followingId String
}

model FollowerRequest {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    sender     User     @relation("FollowRequestSent", fields: [senderId], references: [id], onDelete: Cascade)
    senderId   String
    receiver   User     @relation("FollowRequestReceived", fields: [receiverId], references: [id], onDelete: Cascade)
    receiverId String

    @@unique([senderId, receiverId])
}

model Block {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    blocker   User     @relation("BlockSent", fields: [blockerId], references: [id], onDelete: Cascade)
    blockerId String
    blocked   User     @relation("BlockReceived", fields: [blockedId], references: [id], onDelete: Cascade)
    blockedId String

    @@unique([blockerId, blockedId])
}

model Stories {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String   @unique
    img       String   @unique
}
